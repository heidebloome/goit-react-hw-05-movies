{"version":3,"file":"static/js/16.7a71f806.chunk.js","mappings":"+OAEaA,EAAOC,EAAAA,GAAAA,GAAH,gcAGG,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAC1B,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAkBvCC,EAAMJ,EAAAA,GAAAA,IAAH,+CAIHK,EAAOL,EAAAA,GAAAA,EAAH,0DAGX,SAAAC,GAAK,OACPA,EAAMK,IACNC,EAAAA,EAAAA,IADA,wD,sCC1BEC,EAAa,IAAIC,EAAAA,EA4CvB,EA1Ca,WACT,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACNH,GAAa,GACb,IACIN,EAAWU,eAAeH,GAASI,MAAK,SAAAC,GACpC,IAAMT,EAAOS,EAAKC,KAAI,SAAAC,GAIlB,OAHCA,EAAGC,aAEGD,EAAGC,aAAH,2DAAsED,EAAGC,cADzED,EAAGC,aAAeC,EAElBF,KAEXV,EAAQD,MAEd,MAAOc,GACLC,QAAQC,IAAIF,GAEhBX,GAAa,KACd,CAACC,KAGA,8BACKF,GACK,SAACe,EAAA,EAAD,KACC,SAAC7B,EAAD,UACEY,EAAKU,KAAI,SAAAQ,GACN,OACI,2BACI,SAACzB,EAAD,CAAK0B,IAAKD,EAAMN,aAAcQ,IAAI,WAClC,SAAC1B,EAAD,CAAMC,GAAC,EAAP,SAASuB,EAAMG,QACf,SAAC3B,EAAD,UAAOwB,EAAMI,cAHRJ,EAAMK,a,4LCpC9BzB,EAAb,wFACgB,kCADhB,gDAEe,qCAFf,qFAII,oGAC2B0B,IAAAA,IAAA,kBAAaC,KAAb,oDAAyDA,KAAzD,QAD3B,cACUC,EADV,yBAEWA,EAASjB,KAAKkB,SAFzB,gDAJJ,wHASI,WAAwBJ,GAAxB,uFAC2BC,IAAAA,IAAA,kBAAaC,KAAb,uBAAoCF,EAApC,4BAAkDE,KAAlD,QAD3B,cACUC,EADV,yBAEWA,EAASjB,MAFpB,gDATJ,sHAcI,WAAqBc,GAArB,uFAC2BC,IAAAA,IAAA,kBAAaC,KAAb,uBAAoCF,EAApC,oCAA0DE,KAA1D,QAD3B,cACUC,EADV,yBAEWA,EAASjB,KAAKT,MAFzB,gDAdJ,yHAmBI,WAAwBuB,GAAxB,uFAC2BC,IAAAA,IAAA,kBAAaC,KAAb,uBAAoCF,EAApC,oCAA0DE,KAA1D,QAD3B,cACUC,EADV,yBAEWA,EAASjB,KAAKkB,SAFzB,gDAnBJ,yHAwBI,WAAwBC,GAAxB,uFAC2BJ,IAAAA,IAAA,kBAAaC,KAAb,8CAAmDA,KAAnD,wBAA0EG,IADrG,cACUF,EADV,yBAEWA,EAASjB,KAAKkB,SAFzB,gDAxBJ,+D","sources":["pages/MoviesPage/Cast/Cast.styled.jsx","pages/MoviesPage/Cast/Cast.jsx","services/api.service.js"],"sourcesContent":["import styled, {css} from 'styled-components';\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-row-gap: ${props => props.theme.spacing(3)};\n    grid-column-gap: ${props => props.theme.spacing(3)};\n    padding: 0;\n\n    list-style: none;\n\n    @media(min-width: 480px) {\n        grid-template-columns: 1fr 1fr 1fr;\n    };\n\n    @media(min-width: 748px) {\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n    };\n\n    @media(min-width: 1280px) {\n        grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n    };\n`;\n\nexport const Img = styled.img`\n    max-width: 150px;\n`;\n\nexport const Text = styled.p`\n    font-size: 12px;\n\n    ${props =>\n    props.b &&\n    css`\n      font-weight: 700;\n    `};\n`;","import {useEffect, useState} from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { List, Img, Text } from \"pages/MoviesPage/Cast/Cast.styled\";\nimport Loader from \"components/Loader/Loader\";\nimport ImgNotAvaliable from 'images/01.jpg';\nimport { ApiService } from \"services/api.service\";\nconst apiService = new ApiService();\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setIsLoading(true);\n        try {\n            apiService.fetchMovieCast(movieId).then(data => {\n                const cast = data.map(el => {\n                    !el.profile_path\n                        ? (el.profile_path = ImgNotAvaliable)\n                        : (el.profile_path = `https://www.themoviedb.org/t/p/w440_and_h660_face${el.profile_path}`)\n                    return el;\n                    })\n                setCast(cast);\n            })\n        } catch (error) {\n            console.log(error);\n        }\n        setIsLoading(false);\n    }, [movieId]);\n\n    return (\n        <>\n            {isLoading\n                ? <Loader />\n                : (<List>\n                    {cast.map(actor => {\n                        return (\n                            <li key={actor.id}>\n                                <Img src={actor.profile_path} alt=\"actor\" />\n                                <Text b>{actor.name}</Text>\n                                <Text>{actor.character}</Text>\n                            </li>)\n                    })}\n                </List>)\n            }\n        </>\n    )\n}\n\nexport default Cast;","import axios from \"axios\";\n\nexport class ApiService {\n    #BASE_URL = 'https://api.themoviedb.org/3/';\n    #API_KEY = '5bb22c57348a36de617928c842cde881';\n\n    async fetchTrendingMovies() {\n        const response = await axios.get(`${this.#BASE_URL}trending/movie/day?api_key=${this.#API_KEY}`);\n        return response.data.results;\n    };\n\n    async fetchMovieDetails(id) {\n        const response = await axios.get(`${this.#BASE_URL}movie/${id}?api_key=${this.#API_KEY}`);\n        return response.data;\n    }\n\n    async fetchMovieCast(id) {\n        const response = await axios.get(`${this.#BASE_URL}movie/${id}/credits?api_key=${this.#API_KEY}`);\n        return response.data.cast;\n    }\n\n    async fetchMovieReviews(id) {\n        const response = await axios.get(`${this.#BASE_URL}movie/${id}/reviews?api_key=${this.#API_KEY}`);\n        return response.data.results;\n    }\n\n    async fetchMoviesByName(searchQuery) {\n        const response = await axios.get(`${this.#BASE_URL}search/movie?api_key=${this.#API_KEY}&query=${searchQuery}`);\n        return response.data.results;\n    }\n}"],"names":["List","styled","props","theme","spacing","Img","Text","b","css","apiService","ApiService","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","fetchMovieCast","then","data","map","el","profile_path","ImgNotAvaliable","error","console","log","Loader","actor","src","alt","name","character","id","axios","this","response","results","searchQuery"],"sourceRoot":""}